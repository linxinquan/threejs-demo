"use strict";(self.webpackChunkself_create=self.webpackChunkself_create||[]).push([[128],{8674:(t,e,s)=>{s.d(e,{A:()=>n});var i=s(758);function n(t,e){var s=(0,i.useRef)({deps:e,obj:void 0,initialized:!1}).current;return!1!==s.initialized&&function(t,e){if(t===e)return!0;for(var s=0;s<t.length;s++)if(!Object.is(t[s],e[s]))return!1;return!0}(s.deps,e)||(s.deps=e,s.obj=t(),s.initialized=!0),s.obj}},870:(t,e,s)=>{s.d(e,{EX:()=>Ft,HK:()=>Hi,PT:()=>y,QE:()=>te,T:()=>Me,Zc:()=>Ie,a:()=>oe,az:()=>C,cW:()=>Te,eB:()=>o,im:()=>ee,nB:()=>R,yp:()=>f});class i{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new o);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new o);const s=this.elements,i=t.x,n=t.y,r=t.z;return e.x=s[0]*i+s[1]*n+s[2]*r,e.y=s[3]*i+s[4]*n+s[5]*r,e.z=s[6]*i+s[7]*n+s[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){void 0===e&&(e=new i);const s=this.elements,n=t.elements,o=e.elements,r=s[0],a=s[1],l=s[2],h=s[3],c=s[4],u=s[5],d=s[6],p=s[7],y=s[8],v=n[0],m=n[1],f=n[2],w=n[3],g=n[4],x=n[5],b=n[6],E=n[7],S=n[8];return o[0]=r*v+a*w+l*b,o[1]=r*m+a*g+l*E,o[2]=r*f+a*x+l*S,o[3]=h*v+c*w+u*b,o[4]=h*m+c*g+u*E,o[5]=h*f+c*x+u*S,o[6]=d*v+p*w+y*b,o[7]=d*m+p*g+y*E,o[8]=d*f+p*x+y*S,e}scale(t,e){void 0===e&&(e=new i);const s=this.elements,n=e.elements;for(let e=0;3!==e;e++)n[3*e+0]=t.x*s[3*e+0],n[3*e+1]=t.y*s[3*e+1],n[3*e+2]=t.z*s[3*e+2];return e}solve(t,e){void 0===e&&(e=new o);const s=[];let i,n;for(i=0;i<12;i++)s.push(0);for(i=0;i<3;i++)for(n=0;n<3;n++)s[i+4*n]=this.elements[i+3*n];s[3]=t.x,s[7]=t.y,s[11]=t.z;let r=3;const a=r;let l,h;do{if(i=a-r,0===s[i+4*i])for(n=i+1;n<a;n++)if(0!==s[i+4*n]){l=4;do{h=4-l,s[h+4*i]+=s[h+4*n]}while(--l);break}if(0!==s[i+4*i])for(n=i+1;n<a;n++){const t=s[i+4*n]/s[i+4*i];l=4;do{h=4-l,s[h+4*n]=h<=i?0:s[h+4*n]-s[h+4*i]*t}while(--l)}}while(--r);if(e.z=s[11]/s[10],e.y=(s[7]-s[6]*e.z)/s[5],e.x=(s[3]-s[2]*e.z-s[1]*e.y)/s[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(void 0===s)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let e=0;e<9;e++)t+=this.elements[e]+",";return t}reverse(t){void 0===t&&(t=new i);const e=n;let s,o;for(s=0;s<3;s++)for(o=0;o<3;o++)e[s+6*o]=this.elements[s+3*o];e[3]=1,e[9]=0,e[15]=0,e[4]=0,e[10]=1,e[16]=0,e[5]=0,e[11]=0,e[17]=1;let r=3;const a=r;let l,h;do{if(s=a-r,0===e[s+6*s])for(o=s+1;o<a;o++)if(0!==e[s+6*o]){l=6;do{h=6-l,e[h+6*s]+=e[h+6*o]}while(--l);break}if(0!==e[s+6*s])for(o=s+1;o<a;o++){const t=e[s+6*o]/e[s+6*s];l=6;do{h=6-l,e[h+6*o]=h<=s?0:e[h+6*o]-e[h+6*s]*t}while(--l)}}while(--r);s=2;do{o=s-1;do{const t=e[s+6*o]/e[s+6*s];l=6;do{h=6-l,e[h+6*o]=e[h+6*o]-e[h+6*s]*t}while(--l)}while(o--)}while(--s);s=2;do{const t=1/e[s+6*s];l=6;do{h=6-l,e[h+6*s]=e[h+6*s]*t}while(--l)}while(s--);s=2;do{o=2;do{if(h=e[3+o+6*s],isNaN(h)||h===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(s,o,h)}while(o--)}while(s--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,n=t.w,o=e+e,r=s+s,a=i+i,l=e*o,h=e*r,c=e*a,u=s*r,d=s*a,p=i*a,y=n*o,v=n*r,m=n*a,f=this.elements;return f[0]=1-(u+p),f[1]=h-m,f[2]=c+v,f[3]=h+m,f[4]=1-(l+p),f[5]=d-y,f[6]=c-v,f[7]=d+y,f[8]=1-(l+u),this}transpose(t){void 0===t&&(t=new i);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class o{constructor(t,e,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){void 0===e&&(e=new o);const s=t.x,i=t.y,n=t.z,r=this.x,a=this.y,l=this.z;return e.x=a*n-l*i,e.y=l*s-r*n,e.z=r*i-a*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new o(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new o(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new i([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const t=1/i;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return i}unit(t){void 0===t&&(t=new o);const e=this.x,s=this.y,i=this.z;let n=Math.sqrt(e*e+s*s+i*i);return n>0?(n=1/n,t.x=e*n,t.y=s*n,t.z=i*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,n=t.x,o=t.y,r=t.z;return Math.sqrt((n-e)*(n-e)+(o-s)*(o-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,n=t.x,o=t.y,r=t.z;return(n-e)*(n-e)+(o-s)*(o-s)+(r-i)*(r-i)}scale(t,e){void 0===e&&(e=new o);const s=this.x,i=this.y,n=this.z;return e.x=t*s,e.y=t*i,e.z=t*n,e}vmul(t,e){return void 0===e&&(e=new o),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return void 0===s&&(s=new o),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new o),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=r,n=1/s;i.set(this.x*n,this.y*n,this.z*n);const o=a;Math.abs(i.x)<.9?(o.set(1,0,0),i.cross(o,t)):(o.set(0,1,0),i.cross(o,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,n=this.y,o=this.z;s.x=i+(t.x-i)*e,s.y=n+(t.y-n)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(l),l.almostEquals(t,e)}clone(){return new o(this.x,this.y,this.z)}}o.ZERO=new o(0,0,0),o.UNIT_X=new o(1,0,0),o.UNIT_Y=new o(0,1,0),o.UNIT_Z=new o(0,0,1);const r=new o,a=new o,l=new o;class h{constructor(t){void 0===t&&(t={}),this.lowerBound=new o,this.upperBound=new o,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const n=this.lowerBound,o=this.upperBound,r=s;n.copy(t[0]),r&&r.vmult(n,n),o.copy(n);for(let e=1;e<t.length;e++){let s=t[e];r&&(r.vmult(s,c),s=c),s.x>o.x&&(o.x=s.x),s.x<n.x&&(n.x=s.x),s.y>o.y&&(o.y=s.y),s.y<n.y&&(n.y=s.y),s.z>o.z&&(o.z=s.z),s.z<n.z&&(n.z=s.z)}return e&&(e.vadd(n,n),e.vadd(o,o)),i&&(n.x-=i,n.y-=i,n.z-=i,o.x+=i,o.y+=i,o.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new h).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,n=t.upperBound,o=i.x<=s.x&&s.x<=n.x||e.x<=n.x&&n.x<=s.x,r=i.y<=s.y&&s.y<=n.y||e.y<=n.y&&n.y<=s.y,a=i.z<=s.z&&s.z<=n.z||e.z<=n.z&&n.z<=s.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,n=t.upperBound;return e.x<=i.x&&s.x>=n.x&&e.y<=i.y&&s.y>=n.y&&e.z<=i.z&&s.z>=n.z}getCorners(t,e,s,i,n,o,r,a){const l=this.lowerBound,h=this.upperBound;t.copy(l),e.set(h.x,l.y,l.z),s.set(h.x,h.y,l.z),i.set(l.x,h.y,h.z),n.set(h.x,l.y,h.z),o.set(l.x,h.y,l.z),r.set(l.x,l.y,h.z),a.copy(h)}toLocalFrame(t,e){const s=u,i=s[0],n=s[1],o=s[2],r=s[3],a=s[4],l=s[5],h=s[6],c=s[7];this.getCorners(i,n,o,r,a,l,h,c);for(let e=0;8!==e;e++){const i=s[e];t.pointToLocal(i,i)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=u,i=s[0],n=s[1],o=s[2],r=s[3],a=s[4],l=s[5],h=s[6],c=s[7];this.getCorners(i,n,o,r,a,l,h,c);for(let e=0;8!==e;e++){const i=s[e];t.pointToWorld(i,i)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,n=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*i,a=(this.upperBound.x-s.x)*i,l=(this.lowerBound.y-s.y)*n,h=(this.upperBound.y-s.y)*n,c=(this.lowerBound.z-s.z)*o,u=(this.upperBound.z-s.z)*o,d=Math.max(Math.max(Math.min(r,a),Math.min(l,h)),Math.min(c,u)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,h)),Math.max(c,u));return!(p<0||d>p)}}const c=new o,u=[new o,new o,new o,new o,new o,new o,new o,new o];class d{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const t=i;i=s,s=t}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:n}=e;if(n>i){const t=n;n=i,i=t}this.matrix[(i*(i+1)>>1)+n-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class p{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const s=this._listeners;return void 0===s[t]&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const s=this._listeners;return!(void 0===s[t]||!s[t].includes(e))}hasAnyEventListener(t){return void 0!==this._listeners&&void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const s=this._listeners;if(void 0===s[t])return this;const i=s[t].indexOf(e);return-1!==i&&s[t].splice(i,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let s=0,i=e.length;s<i;s++)e[s].call(this,t)}return this}}class y{constructor(t,e,s,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),void 0===i&&(i=1),this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(.5*e);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new o),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=v,s=m;t.tangents(e,s),this.setFromAxisAngle(e,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new y);const s=this.x,i=this.y,n=this.z,o=this.w,r=t.x,a=t.y,l=t.z,h=t.w;return e.x=s*h+o*r+i*l-n*a,e.y=i*h+o*a+n*r-s*l,e.z=n*h+o*l+s*a-i*r,e.w=o*h-s*r-i*a-n*l,e}inverse(t){void 0===t&&(t=new y);const e=this.x,s=this.y,i=this.z,n=this.w;this.conjugate(t);const o=1/(e*e+s*s+i*i+n*n);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return void 0===t&&(t=new y),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new o);const s=t.x,i=t.y,n=t.z,r=this.x,a=this.y,l=this.z,h=this.w,c=h*s+a*n-l*i,u=h*i+l*s-r*n,d=h*n+r*i-a*s,p=-r*s-a*i-l*n;return e.x=c*h+p*-r+u*-l-d*-a,e.y=u*h+p*-a+d*-r-c*-l,e.z=d*h+p*-l+c*-a-u*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let s,i,n;void 0===e&&(e="YZX");const o=this.x,r=this.y,a=this.z,l=this.w;if("YZX"!==e)throw new Error(`Euler order ${e} not supported yet.`);{const t=o*r+a*l;if(t>.499&&(s=2*Math.atan2(o,l),i=Math.PI/2,n=0),t<-.499&&(s=-2*Math.atan2(o,l),i=-Math.PI/2,n=0),void 0===s){const e=o*o,h=r*r,c=a*a;s=Math.atan2(2*r*l-2*o*a,1-2*h-2*c),i=Math.asin(2*t),n=Math.atan2(2*o*l-2*r*a,1-2*e-2*c)}}t.y=s,t.z=i,t.x=n}setFromEuler(t,e,s,i){void 0===i&&(i="XYZ");const n=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),h=Math.sin(s/2);return"XYZ"===i?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"YXZ"===i?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"ZXY"===i?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"ZYX"===i?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"YZX"===i?(this.x=a*o*r+n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r-a*l*h):"XZY"===i&&(this.x=a*o*r-n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r+a*l*h),this}clone(){return new y(this.x,this.y,this.z,this.w)}slerp(t,e,s){void 0===s&&(s=new y);const i=this.x,n=this.y,o=this.z,r=this.w;let a,l,h,c,u,d=t.x,p=t.y,v=t.z,m=t.w;return l=i*d+n*p+o*v+r*m,l<0&&(l=-l,d=-d,p=-p,v=-v,m=-m),1-l>1e-6?(a=Math.acos(l),h=Math.sin(a),c=Math.sin((1-e)*a)/h,u=Math.sin(e*a)/h):(c=1-e,u=e),s.x=c*i+u*d,s.y=c*n+u*p,s.z=c*o+u*v,s.w=c*r+u*m,s}integrate(t,e,s,i){void 0===i&&(i=new y);const n=t.x*s.x,o=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,h=this.z,c=this.w,u=.5*e;return i.x+=u*(n*c+o*h-r*l),i.y+=u*(o*c+r*a-n*h),i.z+=u*(r*c+n*l-o*a),i.w+=u*(-n*a-o*l-r*h),i}}const v=new o,m=new o;class f{constructor(t){void 0===t&&(t={}),this.id=f.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,i){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}f.idCounter=0,f.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class w{constructor(t){void 0===t&&(t={}),this.position=new o,this.quaternion=new y,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return w.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return w.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new o),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,i){return void 0===i&&(i=new o),s.vsub(t,i),e.conjugate(g),g.vmult(i,i),i}static pointToWorldFrame(t,e,s,i){return void 0===i&&(i=new o),e.vmult(s,i),i.vadd(t,i),i}static vectorToWorldFrame(t,e,s){return void 0===s&&(s=new o),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,i){return void 0===i&&(i=new o),e.w*=-1,e.vmult(s,i),e.w*=-1,i}}const g=new y;class x extends f{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:s=[],normals:i=[],axes:n,boundingSphereRadius:o}=t;super({type:f.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=i,0===this.faceNormals.length&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=n?n.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const i=new o;for(let n=0;n!==t.length;n++){const o=t[n],r=o.length;for(let t=0;t!==r;t++){const n=(t+1)%r;e[o[t]].vsub(e[o[n]],i),i.normalize();let a=!1;for(let t=0;t!==s.length;t++)if(s[t].almostEquals(i)||s[t].almostEquals(i)){a=!0;break}a||s.push(i.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let e=0;e<this.faces[t].length;e++)if(!this.vertices[this.faces[t][e]])throw new Error(`Vertex ${this.faces[t][e]} not found!`);const e=this.faceNormals[t]||new o;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let e=0;e<this.faces[t].length;e++)console.warn(`.vertices[${this.faces[t][e]}] = Vec3(${this.vertices[this.faces[t][e]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],n=this.vertices[s[1]],o=this.vertices[s[2]];x.computeNormal(i,n,o,e)}static computeNormal(t,e,s,i){const n=new o,r=new o;e.vsub(t,r),s.vsub(e,n),n.cross(r,i),i.isZero()||i.normalize()}clipAgainstHull(t,e,s,i,n,r,a,l,h){const c=new o;let u=-1,d=-Number.MAX_VALUE;for(let t=0;t<s.faces.length;t++){c.copy(s.faceNormals[t]),n.vmult(c,c);const e=c.dot(r);e>d&&(d=e,u=t)}const p=[];for(let t=0;t<s.faces[u].length;t++){const e=s.vertices[s.faces[u][t]],r=new o;r.copy(e),n.vmult(r,r),i.vadd(r,r),p.push(r)}u>=0&&this.clipFaceAgainstHull(r,t,e,p,a,l,h)}findSeparatingAxis(t,e,s,i,n,r,a,l){const h=new o,c=new o,u=new o,d=new o,p=new o,y=new o;let v=Number.MAX_VALUE;const m=this;if(m.uniqueAxes)for(let o=0;o!==m.uniqueAxes.length;o++){s.vmult(m.uniqueAxes[o],h);const a=m.testSepAxis(h,t,e,s,i,n);if(!1===a)return!1;a<v&&(v=a,r.copy(h))}else{const o=a?a.length:m.faces.length;for(let l=0;l<o;l++){const o=a?a[l]:l;h.copy(m.faceNormals[o]),s.vmult(h,h);const c=m.testSepAxis(h,t,e,s,i,n);if(!1===c)return!1;c<v&&(v=c,r.copy(h))}}if(t.uniqueAxes)for(let o=0;o!==t.uniqueAxes.length;o++){n.vmult(t.uniqueAxes[o],c);const a=m.testSepAxis(c,t,e,s,i,n);if(!1===a)return!1;a<v&&(v=a,r.copy(c))}else{const o=l?l.length:t.faces.length;for(let a=0;a<o;a++){const o=l?l[a]:a;c.copy(t.faceNormals[o]),n.vmult(c,c);const h=m.testSepAxis(c,t,e,s,i,n);if(!1===h)return!1;h<v&&(v=h,r.copy(c))}}for(let o=0;o!==m.uniqueEdges.length;o++){s.vmult(m.uniqueEdges[o],d);for(let o=0;o!==t.uniqueEdges.length;o++)if(n.vmult(t.uniqueEdges[o],p),d.cross(p,y),!y.almostZero()){y.normalize();const o=m.testSepAxis(y,t,e,s,i,n);if(!1===o)return!1;o<v&&(v=o,r.copy(y))}}return i.vsub(e,u),u.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,s,i,n,o){x.project(this,t,s,i,b),x.project(e,t,n,o,E);const r=b[0],a=b[1],l=E[0],h=E[1];if(r<h||l<a)return!1;const c=r-h,u=l-a;return c<u?c:u}calculateLocalInertia(t,e){const s=new o,i=new o;this.computeLocalAABB(i,s);const n=s.x-i.x,r=s.y-i.y,a=s.z-i.z;e.x=1/12*t*(2*r*2*r+2*a*2*a),e.y=1/12*t*(2*n*2*n+2*a*2*a),e.z=1/12*t*(2*r*2*r+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]];return-s.dot(i)}clipFaceAgainstHull(t,e,s,i,n,r,a){const l=new o,h=new o,c=new o,u=new o,d=new o,p=new o,y=new o,v=new o,m=this,f=i,w=[];let g=-1,x=Number.MAX_VALUE;for(let e=0;e<m.faces.length;e++){l.copy(m.faceNormals[e]),s.vmult(l,l);const i=l.dot(t);i<x&&(x=i,g=e)}if(g<0)return;const b=m.faces[g];b.connectedFaces=[];for(let t=0;t<m.faces.length;t++)for(let e=0;e<m.faces[t].length;e++)-1!==b.indexOf(m.faces[t][e])&&t!==g&&-1===b.connectedFaces.indexOf(t)&&b.connectedFaces.push(t);const E=b.length;for(let t=0;t<E;t++){const i=m.vertices[b[t]],n=m.vertices[b[(t+1)%E]];i.vsub(n,h),c.copy(h),s.vmult(c,c),e.vadd(c,c),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),c.cross(u,d),d.negate(d),p.copy(i),s.vmult(p,p),e.vadd(p,p);const o=b.connectedFaces[t];y.copy(this.faceNormals[o]);const r=this.getPlaneConstantOfFace(o);v.copy(y),s.vmult(v,v);const a=r-v.dot(e);for(this.clipFaceAgainstPlane(f,w,v,a);f.length;)f.shift();for(;w.length;)f.push(w.shift())}y.copy(this.faceNormals[g]);const S=this.getPlaneConstantOfFace(g);v.copy(y),s.vmult(v,v);const z=S-v.dot(e);for(let t=0;t<f.length;t++){let e=v.dot(f[t])+z;if(e<=n&&(console.log(`clamped: depth=${e} to minDist=${n}`),e=n),e<=r){const s=f[t];if(e<=1e-6){const t={point:s,normal:v,depth:e};a.push(t)}}}}clipFaceAgainstPlane(t,e,s,i){let n,r;const a=t.length;if(a<2)return e;let l=t[t.length-1],h=t[0];n=s.dot(l)+i;for(let c=0;c<a;c++){if(h=t[c],r=s.dot(h)+i,n<0)if(r<0){const t=new o;t.copy(h),e.push(t)}else{const t=new o;l.lerp(h,n/(n-r),t),e.push(t)}else if(r<0){const t=new o;l.lerp(h,n/(n-r),t),e.push(t),e.push(h)}l=h,n=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new o);const s=this.vertices,i=this.worldVertices;for(let n=0;n!==this.vertices.length;n++)e.vmult(s[n],i[n]),t.vadd(i[n],i[n]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const n=s[i];n.x<t.x?t.x=n.x:n.x>e.x&&(e.x=n.x),n.y<t.y?t.y=n.y:n.y>e.y&&(e.y=n.y),n.z<t.z?t.z=n.z:n.z>e.z&&(e.z=n.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new o);const s=this.faceNormals,i=this.worldFaceNormals;for(let n=0;n!==e;n++)t.vmult(s[n],i[n]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const n=this.vertices;let r,a,l,h,c,u,d=new o;for(let s=0;s<n.length;s++){d.copy(n[s]),e.vmult(d,d),t.vadd(d,d);const i=d;(void 0===r||i.x<r)&&(r=i.x),(void 0===h||i.x>h)&&(h=i.x),(void 0===a||i.y<a)&&(a=i.y),(void 0===c||i.y>c)&&(c=i.y),(void 0===l||i.z<l)&&(l=i.z),(void 0===u||i.z>u)&&(u=i.z)}s.set(r,a,l),i.set(h,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new o);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let t=0;t<s;t++){const s=i[t];e.vmult(s,s)}for(let t=0;t<this.faceNormals.length;t++){const s=this.faceNormals[t];e.vmult(s,s)}}if(t)for(let e=0;e<s;e++){const s=i[e];s.vadd(t,s)}}pointIsInside(t){const e=this.vertices,s=this.faces,i=this.faceNormals,n=new o;this.getAveragePointLocal(n);for(let r=0;r<this.faces.length;r++){let a=i[r];const l=e[s[r][0]],h=new o;t.vsub(l,h);const c=a.dot(h),u=new o;n.vsub(l,u);const d=a.dot(u);if(c<0&&d>0||c>0&&d<0)return!1}return-1}static project(t,e,s,i,n){const o=t.vertices.length,r=S;let a=0,l=0;const h=z,c=t.vertices;h.setZero(),w.vectorToLocalFrame(s,i,e,r),w.pointToLocalFrame(s,i,h,h);const u=h.dot(r);l=a=c[0].dot(r);for(let t=1;t<o;t++){const e=c[t].dot(r);e>a&&(a=e),e<l&&(l=e)}if(l-=u,a-=u,l>a){const t=l;l=a,a=t}n[0]=a,n[1]=l}}const b=[],E=[],S=(new o,new o),z=new o;class C extends f{constructor(t){super({type:f.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,i=o,n=[new i(-t,-e,-s),new i(t,-e,-s),new i(t,e,-s),new i(-t,e,-s),new i(-t,-e,s),new i(t,-e,s),new i(t,e,s),new i(-t,e,s)],r=[new i(0,0,1),new i(0,1,0),new i(1,0,0)],a=new x({vertices:n,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new o),C.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),void 0!==e)for(let t=0;t!==s.length;t++)e.vmult(s[t],s[t]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,n=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let i=0;i<n.length;i++)A.set(n[i][0],n[i][1],n[i][2]),e.vmult(A,A),t.vadd(A,A),s(A.x,A.y,A.z)}calculateWorldAABB(t,e,s,i){const n=this.halfExtents;B[0].set(n.x,n.y,n.z),B[1].set(-n.x,n.y,n.z),B[2].set(-n.x,-n.y,n.z),B[3].set(-n.x,-n.y,-n.z),B[4].set(n.x,-n.y,-n.z),B[5].set(n.x,n.y,-n.z),B[6].set(-n.x,n.y,-n.z),B[7].set(n.x,-n.y,n.z);const o=B[0];e.vmult(o,o),t.vadd(o,o),i.copy(o),s.copy(o);for(let n=1;n<8;n++){const o=B[n];e.vmult(o,o),t.vadd(o,o);const r=o.x,a=o.y,l=o.z;r>i.x&&(i.x=r),a>i.y&&(i.y=a),l>i.z&&(i.z=l),r<s.x&&(s.x=r),a<s.y&&(s.y=a),l<s.z&&(s.z=l)}}}const A=new o,B=[new o,new o,new o,new o,new o,new o,new o,new o];class R extends p{constructor(t){void 0===t&&(t={}),super(),this.id=R.idCounter++,this.index=-1,this.world=null,this.vlambda=new o,this.collisionFilterGroup="number"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof t.collisionResponse||t.collisionResponse,this.position=new o,this.previousPosition=new o,this.interpolatedPosition=new o,this.initPosition=new o,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new o,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new o,this.force=new o;const e="number"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?R.STATIC:R.DYNAMIC,typeof t.type==typeof R.STATIC&&(this.type=t.type),this.allowSleep=void 0===t.allowSleep||t.allowSleep,this.sleepState=R.AWAKE,this.sleepSpeedLimit=void 0!==t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new o,this.quaternion=new y,this.initQuaternion=new y,this.previousQuaternion=new y,this.interpolatedQuaternion=new y,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new o,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new o,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new o,this.invInertia=new o,this.invInertiaWorld=new i,this.invMassSolve=0,this.invInertiaSolve=new o,this.invInertiaWorldSolve=new i,this.fixedRotation=void 0!==t.fixedRotation&&t.fixedRotation,this.angularDamping=void 0!==t.angularDamping?t.angularDamping:.01,this.linearFactor=new o(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new o(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new h,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new o,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=R.AWAKE,this.wakeUpAfterNarrowphase=!1,t===R.SLEEPING&&this.dispatchEvent(R.wakeupEvent)}sleep(){this.sleepState=R.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===R.AWAKE&&s<i?(this.sleepState=R.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(R.sleepyEvent)):e===R.SLEEPY&&s>i?this.wakeUp():e===R.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(R.sleepEvent))}}updateSolveMassProperties(){this.sleepState===R.SLEEPING||this.type===R.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new o),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new o),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new o),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new o),this.quaternion.vmult(t,e),e}addShape(t,e,s){const i=new o,n=new y;return e&&i.copy(e),s&&n.copy(s),this.shapes.push(t),this.shapeOffsets.push(i),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let n=0;n!==s;n++){const s=t[n];s.updateBoundingSphereRadius();const o=e[n].length(),r=s.boundingSphereRadius;o+r>i&&(i=o+r)}this.boundingRadius=i}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,n=M,o=I,r=this.quaternion,a=this.aabb,l=F;for(let h=0;h!==i;h++){const i=t[h];r.vmult(e[h],n),n.vadd(this.position,n),r.mult(s[h],o),i.calculateWorldAABB(n,o,l.lowerBound,l.upperBound),0===h?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=T,s=P;t.setRotationFromQuaternion(this.quaternion),t.transpose(s),t.scale(e,t),t.mmult(s,this.invInertiaWorld)}}applyForce(t,e){if(void 0===e&&(e=new o),this.type!==R.DYNAMIC)return;this.sleepState===R.SLEEPING&&this.wakeUp();const s=N;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new o),this.type!==R.DYNAMIC)return;const s=L,i=q;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyTorque(t){this.type===R.DYNAMIC&&(this.sleepState===R.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new o),this.type!==R.DYNAMIC)return;this.sleepState===R.SLEEPING&&this.wakeUp();const s=e,i=W;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const n=j;s.cross(t,n),this.invInertiaWorld.vmult(n,n),this.angularVelocity.vadd(n,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new o),this.type!==R.DYNAMIC)return;const s=V,i=k;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=O;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),C.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new o;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==R.DYNAMIC&&this.type!==R.KINEMATIC||this.sleepState===R.SLEEPING)return;const i=this.velocity,n=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,h=this.invMass,c=this.invInertiaWorld,u=this.linearFactor,d=h*t;i.x+=r.x*d*u.x,i.y+=r.y*d*u.y,i.z+=r.z*d*u.z;const p=c.elements,y=this.angularFactor,v=a.x*y.x,m=a.y*y.y,f=a.z*y.z;n.x+=t*(p[0]*v+p[1]*m+p[2]*f),n.y+=t*(p[3]*v+p[4]*m+p[5]*f),n.z+=t*(p[6]*v+p[7]*m+p[8]*f),o.x+=i.x*t,o.y+=i.y*t,o.z+=i.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}R.idCounter=0,R.COLLIDE_EVENT_NAME="collide",R.DYNAMIC=1,R.STATIC=2,R.KINEMATIC=4,R.AWAKE=0,R.SLEEPY=1,R.SLEEPING=2,R.wakeupEvent={type:"wakeup"},R.sleepyEvent={type:"sleepy"},R.sleepEvent={type:"sleep"};const M=new o,I=new y,F=new h,T=new i,P=new i,N=(new i,new o),L=new o,q=new o,W=new o,j=new o,V=new o,k=new o,O=new o;class H{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask&&e.collisionFilterGroup&t.collisionFilterMask)||(t.type&R.STATIC||t.sleepState===R.SLEEPING)&&(e.type&R.STATIC||e.sleepState===R.SLEEPING))}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const n=D;e.position.vsub(t.position,n);const o=(t.boundingRadius+e.boundingRadius)**2;n.lengthSquared()<o&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=_,i=U,n=G,o=t.length;for(let s=0;s!==o;s++)i[s]=t[s],n[s]=e[s];t.length=0,e.length=0;for(let t=0;t!==o;t++){const e=i[t].id,o=n[t].id,r=e<o?`${e},${o}`:`${o},${e}`;s[r]=t,s.keys.push(r)}for(let o=0;o!==s.keys.length;o++){const o=s.keys.pop(),r=s[o];t.push(i[r]),e.push(n[r]),delete s[o]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new o;t.position.vsub(e.position,s);const i=t.shapes[0],n=e.shapes[0];return Math.pow(i.boundingSphereRadius+n.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const D=new o;new o,new y,new o;const _={keys:[]},U=[],G=[];new o,new o,new o;class X extends H{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,n=i.length;let o,r;for(let t=0;t!==n;t++)for(let n=0;n!==t;n++)o=i[t],r=i[n],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){void 0===s&&(s=[]);for(let i=0;i<t.bodies.length;i++){const n=t.bodies[i];n.aabbNeedsUpdate&&n.updateAABB(),n.aabb.overlaps(e)&&s.push(n)}return s}}class Y{constructor(){this.rayFromWorld=new o,this.rayToWorld=new o,this.hitNormalWorld=new o,this.hitPointWorld=new o,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,n,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=n,this.body=o,this.distance=r}}let $,K,Z,Q,J,tt,et;$=f.types.SPHERE,K=f.types.PLANE,Z=f.types.BOX,Q=f.types.CYLINDER,J=f.types.CONVEXPOLYHEDRON,tt=f.types.HEIGHTFIELD,et=f.types.TRIMESH;class st{get[$](){return this._intersectSphere}get[K](){return this._intersectPlane}get[Z](){return this._intersectBox}get[Q](){return this._intersectConvex}get[J](){return this._intersectConvex}get[tt](){return this._intersectHeightfield}get[et](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new o),void 0===e&&(e=new o),this.from=t.clone(),this.to=e.clone(),this.direction=new o,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=st.ANY,this.result=new Y,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||st.ANY,this.result=e.result||new Y,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(it),nt.length=0,t.broadphase.aabbQuery(t,it,nt),this.intersectBodies(nt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse)return;if(!(this.collisionFilterGroup&t.collisionFilterMask&&t.collisionFilterGroup&this.collisionFilterMask))return;const i=at,n=lt;for(let e=0,o=t.shapes.length;e<o;e++){const o=t.shapes[e];if((!s||o.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[e],n),t.quaternion.vmult(t.shapeOffsets[e],i),i.vadd(t.position,i),this.intersectShape(o,n,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let e=0,s=t.length;!this.result.shouldStop&&e<s;e++)this.intersectBody(t[e])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){const n=function(t,e,s){s.vsub(t,Mt);const i=Mt.dot(e);e.scale(i,It),It.vadd(t,It);return s.distanceTo(It)}(this.from,this.direction,s);if(n>t.boundingSphereRadius)return;const o=this[t.type];o&&o.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,n){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,n)}_intersectPlane(t,e,s,i,n){const r=this.from,a=this.to,l=this.direction,h=new o(0,0,1);e.vmult(h,h);const c=new o;r.vsub(s,c);const u=c.dot(h);if(a.vsub(s,c),u*c.dot(h)>0)return;if(r.distanceTo(a)<u)return;const d=h.dot(l);if(Math.abs(d)<this.precision)return;const p=new o,y=new o,v=new o;r.vsub(s,p);const m=-h.dot(p)/d;l.scale(m,y),r.vadd(y,v),this.reportIntersection(h,v,n,i,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,n=this.from;e.x=Math.min(i.x,n.x),e.y=Math.min(i.y,n.y),e.z=Math.min(i.z,n.z),s.x=Math.max(i.x,n.x),s.y=Math.max(i.y,n.y),s.z=Math.max(i.z,n.z)}_intersectHeightfield(t,e,s,i,n){t.data,t.elementSize;const o=vt;o.from.copy(this.from),o.to.copy(this.to),w.pointToLocalFrame(s,e,o.from,o.from),w.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=mt;let a,l,c,u;a=l=0,c=u=t.data.length-1;const d=new h;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),c=Math.min(c,r[0]+1),u=Math.min(u,r[1]+1);for(let r=a;r<c;r++)for(let a=l;a<u;a++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(r,a,d),d.overlapsRay(o)){if(t.getConvexTrianglePillar(r,a,!1),w.pointToWorldFrame(s,e,t.pillarOffset,yt),this._intersectConvex(t.pillarConvex,e,yt,i,n,pt),this.result.shouldStop)return;t.getConvexTrianglePillar(r,a,!0),w.pointToWorldFrame(s,e,t.pillarOffset,yt),this._intersectConvex(t.pillarConvex,e,yt,i,n,pt)}}}_intersectSphere(t,e,s,i,n){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),c=h**2-4*l*((o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-a**2),u=ft,d=wt;if(!(c<0))if(0===c)o.lerp(r,c,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,n,i,-1);else{const t=(-h-Math.sqrt(c))/(2*l),e=(-h+Math.sqrt(c))/(2*l);if(t>=0&&t<=1&&(o.lerp(r,t,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,n,i,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(o.lerp(r,e,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,n,i,-1))}}_intersectConvex(t,e,s,i,n,o){const r=gt,a=xt,l=o&&o.faceList||null,h=t.faces,c=t.vertices,u=t.faceNormals,d=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),m=l?l.length:h.length,f=this.result;for(let t=0;!f.shouldStop&&t<m;t++){const o=l?l[t]:t,y=h[o],m=u[o],w=e,g=s;a.copy(c[y[0]]),w.vmult(a,a),a.vadd(g,a),a.vsub(p,a),w.vmult(m,r);const x=d.dot(r);if(Math.abs(x)<this.precision)continue;const b=r.dot(a)/x;if(!(b<0)){d.scale(b,ht),ht.vadd(p,ht),ct.copy(c[y[0]]),w.vmult(ct,ct),g.vadd(ct,ct);for(let t=1;!f.shouldStop&&t<y.length-1;t++){ut.copy(c[y[t]]),dt.copy(c[y[t+1]]),w.vmult(ut,ut),w.vmult(dt,dt),g.vadd(ut,ut),g.vadd(dt,dt);const e=ht.distanceTo(p);!st.pointInTriangle(ht,ct,ut,dt)&&!st.pointInTriangle(ht,ut,ct,dt)||e>v||this.reportIntersection(r,ht,n,i,o)}}}}_intersectTrimesh(t,e,s,i,n,o){const r=bt,a=Bt,l=Rt,h=xt,c=Et,u=St,d=zt,p=At,y=Ct,v=t.indices;t.vertices;const m=this.from,f=this.to,g=this.direction;l.position.copy(s),l.quaternion.copy(e),w.vectorToLocalFrame(s,e,g,c),w.pointToLocalFrame(s,e,m,u),w.pointToLocalFrame(s,e,f,d),d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.vsub(u,c),c.normalize();const x=u.distanceSquared(d);t.tree.rayQuery(this,l,a);for(let o=0,l=a.length;!this.result.shouldStop&&o!==l;o++){const l=a[o];t.getNormal(l,r),t.getVertex(v[3*l],ct),ct.vsub(u,h);const d=c.dot(r),m=r.dot(h)/d;if(m<0)continue;c.scale(m,ht),ht.vadd(u,ht),t.getVertex(v[3*l+1],ut),t.getVertex(v[3*l+2],dt);const f=ht.distanceSquared(u);!st.pointInTriangle(ht,ut,ct,dt)&&!st.pointInTriangle(ht,ct,ut,dt)||f>x||(w.vectorToWorldFrame(e,r,y),w.pointToWorldFrame(s,e,ht,p),this.reportIntersection(y,p,n,i,l))}a.length=0}reportIntersection(t,e,s,i,n){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==n?n:-1,this.mode){case st.ALL:this.hasHit=!0,l.set(o,r,t,e,s,i,a),l.hasHit=!0,this.callback(l);break;case st.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,i,a));break;case st.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,i,a),l.shouldStop=!0}}static pointInTriangle(t,e,s,i){i.vsub(e,Mt),s.vsub(e,ot),t.vsub(e,rt);const n=Mt.dot(Mt),o=Mt.dot(ot),r=Mt.dot(rt),a=ot.dot(ot),l=ot.dot(rt);let h,c;return(h=a*r-o*l)>=0&&(c=n*l-o*r)>=0&&h+c<n*a-o*o}}st.CLOSEST=1,st.ANY=2,st.ALL=4;const it=new h,nt=[],ot=new o,rt=new o,at=new o,lt=new y,ht=new o,ct=new o,ut=new o,dt=new o;new o,new Y;const pt={faceList:[0]},yt=new o,vt=new st,mt=[],ft=new o,wt=new o,gt=new o,xt=(new o,new o,new o),bt=new o,Et=new o,St=new o,zt=new o,Ct=new o,At=new o;new h;const Bt=[],Rt=new w,Mt=new o,It=new o;class Ft extends H{static checkBounds(t,e,s){let i,n;0===s?(i=t.position.x,n=e.position.x):1===s?(i=t.position.y,n=e.position.y):2===s&&(i=t.position.z,n=e.position.z);const o=t.boundingRadius;return n-e.boundingRadius<i+o}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=s.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=s}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=s.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=s}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=s.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=s}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=t=>{e.push(t.body)},this._removeBodyHandler=t=>{const s=e.indexOf(t.body);-1!==s&&e.splice(s,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const i=this.axisList,n=i.length,o=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==n;r++){const t=i[r];for(a=r+1;a<n;a++){const n=i[a];if(this.needBroadphaseCollision(t,n)){if(!Ft.checkBounds(t,n,o))break;this.intersectionTest(t,n,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let e=0;e!==s;e++){const s=t[e];s.aabbNeedsUpdate&&s.updateAABB()}0===e?Ft.insertionSortX(t):1===e?Ft.insertionSortY(t):2===e&&Ft.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,i=0,n=0,o=0;const r=this.axisList,a=r.length,l=1/a;for(let l=0;l!==a;l++){const a=r[l],h=a.position.x;t+=h,e+=h*h;const c=a.position.y;s+=c,i+=c*c;const u=a.position.z;n+=u,o+=u*u}const h=e-t*t*l,c=i-s*s*l,u=o-n*n*l;this.axisIndex=h>c?h>u?0:2:c>u?1:2}aabbQuery(t,e,s){void 0===s&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const i=this.axisIndex;let n="x";1===i&&(n="y"),2===i&&(n="z");const o=this.axisList;e.lowerBound[n],e.upperBound[n];for(let t=0;t<o.length;t++){const i=o[t];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Tt{static defaults(t,e){void 0===t&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Pt{constructor(t,e,s){void 0===s&&(s={}),s=Tt.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Pt.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Pt.idCounter=0;class Nt{constructor(){this.spatial=new o,this.rotational=new o}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Lt{constructor(t,e,s,i){void 0===s&&(s=-1e6),void 0===i&&(i=1e6),this.id=Lt.idCounter++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Nt,this.jacobianElementB=new Nt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,n=t,o=s;this.a=4/(o*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(o*o*n*(1+4*i))}computeB(t,e,s){const i=this.computeGW();return-this.computeGq()*t-i*e-this.computeGiMf()*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.position,o=i.position;return t.spatial.dot(n)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.velocity,o=i.velocity,r=s.angularVelocity,a=i.angularVelocity;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.vlambda,o=i.vlambda,r=s.wlambda,a=i.wlambda;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.force,o=s.torque,r=i.force,a=i.torque,l=s.invMassSolve,h=i.invMassSolve;return n.scale(l,qt),r.scale(h,Wt),s.invInertiaWorldSolve.vmult(o,jt),i.invInertiaWorldSolve.vmult(a,Vt),t.multiplyVectors(qt,jt)+e.multiplyVectors(Wt,Vt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.invMassSolve,o=i.invMassSolve,r=s.invInertiaWorldSolve,a=i.invInertiaWorldSolve;let l=n+o;return r.vmult(t.rotational,kt),l+=kt.dot(t.rotational),a.vmult(e.rotational,kt),l+=kt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,n=this.bj,o=Ot;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),n.vlambda.addScaledVector(n.invMassSolve*t,s.spatial,n.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda),n.invInertiaWorldSolve.vmult(s.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Lt.idCounter=0;const qt=new o,Wt=new o,jt=new o,Vt=new o,kt=new o,Ot=new o;class Ht extends Lt{constructor(t,e,s){void 0===s&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new o,this.rj=new o,this.ni=new o}computeB(t){const e=this.a,s=this.b,i=this.bi,n=this.bj,o=this.ri,r=this.rj,a=Dt,l=_t,h=i.velocity,c=i.angularVelocity;i.force,i.torque;const u=n.velocity,d=n.angularVelocity;n.force,n.torque;const p=Ut,y=this.jacobianElementA,v=this.jacobianElementB,m=this.ni;o.cross(m,a),r.cross(m,l),m.negate(y.spatial),a.negate(y.rotational),v.spatial.copy(m),v.rotational.copy(l),p.copy(n.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(o,p);const f=m.dot(p),w=this.restitution+1;return-f*e-(w*u.dot(m)-w*h.dot(m)+d.dot(l)-c.dot(a))*s-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=Gt,e=Xt,s=Yt,i=$t,n=Kt;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,n),this.ni.dot(n)}}const Dt=new o,_t=new o,Ut=new o,Gt=new o,Xt=new o,Yt=new o,$t=new o,Kt=new o;new o,new o,new o,new o,new o,new o,new o,new o,new o,new o;class Zt extends Lt{constructor(t,e,s){super(t,e,-s,s),this.ri=new o,this.rj=new o,this.t=new o}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,i=this.rj,n=Qt,o=Jt,r=this.t;s.cross(r,n),i.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;return r.negate(a.spatial),n.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o),-this.computeGW()*e-t*this.computeGiMf()}}const Qt=new o,Jt=new o;class te{constructor(t,e,s){s=Tt.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=te.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}te.idCounter=0;class ee{constructor(t){void 0===t&&(t={});let e="";"string"==typeof t&&(e=t,t={}),this.name=e,this.id=ee.idCounter++,this.friction=void 0!==t.friction?t.friction:-1,this.restitution=void 0!==t.restitution?t.restitution:-1}}ee.idCounter=0,new o,new o,new o,new o,new o,new o,new o,new o,new o,new o,new o;class se{constructor(t){void 0===t&&(t={}),t=Tt.defaults(t,{chassisConnectionPointLocal:new o,chassisConnectionPointWorld:new o,directionLocal:new o,directionWorld:new o,axleLocal:new o,axleWorld:new o,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new Y,this.worldTransform=new w,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,ne),t.getVelocityAtWorldPoint(ne,ie);const i=e.hitNormalWorld.dot(ie);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=10;else{const t=-1/s;this.suspensionRelativeVelocity=i*t,this.clippedInvContactDotSuspension=t}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const ie=new o,ne=new o;class oe{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=void 0!==t.indexRightAxis?t.indexRightAxis:2,this.indexForwardAxis=void 0!==t.indexForwardAxis?t.indexForwardAxis:0,this.indexUpAxis=void 0!==t.indexUpAxis?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t){void 0===t&&(t={});const e=new se(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){this.wheelInfos[e].steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(0===t?1:0,1===t?1:0,2===t?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,i=this.chassisBody;for(let t=0;t<s;t++)this.updateWheelTransform(t);this.currentVehicleSpeedKmHour=3.6*i.velocity.length();const n=new o;this.getVehicleAxisWorld(this.indexForwardAxis,n),n.dot(i.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let t=0;t<s;t++)this.castRay(e[t]);this.updateSuspension(t);const r=new o,a=new o;for(let n=0;n<s;n++){const s=e[n];let o=s.suspensionForce;o>s.maxSuspensionForce&&(o=s.maxSuspensionForce),s.raycastResult.hitNormalWorld.scale(o*t,r),s.raycastResult.hitPointWorld.vsub(i.position,a),i.applyImpulse(r,a)}this.updateFriction(t);const l=new o,h=new o,c=new o;for(let n=0;n<s;n++){const s=e[n];i.getVelocityAtWorldPoint(s.chassisConnectionPointWorld,c);let o=1;if(1===this.indexUpAxis&&(o=-1),s.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,h);const e=h.dot(s.raycastResult.hitNormalWorld);s.raycastResult.hitNormalWorld.scale(e,l),h.vsub(l,h);const i=h.dot(c);s.deltaRotation=o*i*t/s.radius}!s.sliding&&s.isInContact||0===s.engineForce||!s.useCustomSlidingRotationalSpeed||(s.deltaRotation=(s.engineForce>0?1:-1)*s.customSlidingRotationalSpeed*t),Math.abs(s.brake)>Math.abs(s.engineForce)&&(s.deltaRotation=0),s.rotation+=s.deltaRotation,s.deltaRotation*=.99}}updateSuspension(t){const e=this.chassisBody.mass,s=this.wheelInfos,i=s.length;for(let t=0;t<i;t++){const i=s[t];if(i.isInContact){let t;const s=i.suspensionRestLength-i.suspensionLength;t=i.suspensionStiffness*s*i.clippedInvContactDotSuspension;const n=i.suspensionRelativeVelocity;let o;o=n<0?i.dampingCompression:i.dampingRelaxation,t-=o*n,i.suspensionForce=t*e,i.suspensionForce<0&&(i.suspensionForce=0)}else i.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=he,s=ce;this.updateWheelTransformWorld(t);const i=this.chassisBody;let n=-1;const r=t.suspensionRestLength+t.radius;t.directionWorld.scale(r,e);const a=t.chassisConnectionPointWorld;a.vadd(e,s);const l=t.raycastResult;l.reset();const h=i.collisionResponse;i.collisionResponse=!1,this.world.rayTest(a,s,l),i.collisionResponse=h;const c=l.body;if(t.raycastResult.groundObject=0,c){n=l.distance,t.raycastResult.hitNormalWorld=l.hitNormalWorld,t.isInContact=!0;const e=l.distance;t.suspensionLength=e-t.radius;const s=t.suspensionRestLength-t.maxSuspensionTravel,r=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<s&&(t.suspensionLength=s),t.suspensionLength>r&&(t.suspensionLength=r,t.raycastResult.reset());const a=t.raycastResult.hitNormalWorld.dot(t.directionWorld),h=new o;i.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,h);const c=t.raycastResult.hitNormalWorld.dot(h);if(a>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=10;else{const e=-1/a;t.suspensionRelativeVelocity=c*e,t.clippedInvContactDotSuspension=e}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return n}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=re,s=ae,i=le,n=this.wheelInfos[t];this.updateWheelTransformWorld(n),n.directionLocal.scale(-1,e),s.copy(n.axleLocal),e.cross(s,i),i.normalize(),s.normalize();const o=n.steering,r=new y;r.setFromAxisAngle(e,o);const a=new y;a.setFromAxisAngle(s,n.rotation);const l=n.worldTransform.quaternion;this.chassisBody.quaternion.mult(r,l),l.mult(a,l),l.normalize();const h=n.worldTransform.position;h.copy(n.directionWorld),h.scale(n.suspensionLength,h),h.vadd(n.chassisConnectionPointWorld,h)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=de,s=this.wheelInfos,i=s.length,n=this.chassisBody,r=ye,a=pe;this.numWheelsOnGround=0;for(let t=0;t<i;t++){const e=s[t];e.raycastResult.body&&this.numWheelsOnGround++,e.sideImpulse=0,e.forwardImpulse=0,r[t]||(r[t]=new o),a[t]||(a[t]=new o)}for(let t=0;t<i;t++){const i=s[t],o=i.raycastResult.body;if(o){const s=a[t];this.getWheelTransformWorld(t).vectorToWorldFrame(ue[this.indexRightAxis],s);const l=i.raycastResult.hitNormalWorld,h=s.dot(l);l.scale(h,e),s.vsub(e,s),s.normalize(),l.cross(s,r[t]),r[t].normalize(),i.sideImpulse=Re(n,i.raycastResult.hitPointWorld,o,i.raycastResult.hitPointWorld,s),i.sideImpulse*=ve}}this.sliding=!1;for(let e=0;e<i;e++){const i=s[e],o=i.raycastResult.body;let a=0;if(i.slipInfo=1,o){const s=0,l=i.brake?i.brake:s;a=ge(n,o,i.raycastResult.hitPointWorld,r[e],l),a+=i.engineForce*t;const h=l/a;i.slipInfo*=h}if(i.forwardImpulse=0,i.skidInfo=1,o){i.skidInfo=1;const e=i.suspensionForce*t*i.frictionSlip,s=e*e;i.forwardImpulse=a;const n=.5*i.forwardImpulse/i.forwardAcceleration,o=1*i.sideImpulse/i.sideAcceleration,r=n*n+o*o;if(i.sliding=!1,r>s){this.sliding=!0,i.sliding=!0;const t=e/Math.sqrt(r);i.skidInfo*=t}}}if(this.sliding)for(let t=0;t<i;t++){const e=s[t];0!==e.sideImpulse&&e.skidInfo<1&&(e.forwardImpulse*=e.skidInfo,e.sideImpulse*=e.skidInfo)}for(let t=0;t<i;t++){const e=s[t],i=new o;if(e.raycastResult.hitPointWorld.vsub(n.position,i),0!==e.forwardImpulse){const s=new o;r[t].scale(e.forwardImpulse,s),n.applyImpulse(s,i)}if(0!==e.sideImpulse){const s=e.raycastResult.body,r=new o;e.raycastResult.hitPointWorld.vsub(s.position,r);const l=new o;a[t].scale(e.sideImpulse,l),n.vectorToLocalFrame(i,i),i["xyz"[this.indexUpAxis]]*=e.rollInfluence,n.vectorToWorldFrame(i,i),n.applyImpulse(l,i),l.scale(-1,l),s.applyImpulse(l,r)}}}}new o,new o,new o;const re=new o,ae=new o,le=new o;new st,new o;const he=new o,ce=new o,ue=[new o(1,0,0),new o(0,1,0),new o(0,0,1)],de=new o,pe=[],ye=[],ve=1,me=new o,fe=new o,we=new o;function ge(t,e,s,i,n){let o=0;const r=s,a=me,l=fe,h=we;return t.getVelocityAtWorldPoint(r,a),e.getVelocityAtWorldPoint(r,l),a.vsub(l,h),o=-i.dot(h)*(1/(ze(t,s,i)+ze(e,s,i))),n<o&&(o=n),o<-n&&(o=-n),o}const xe=new o,be=new o,Ee=new o,Se=new o;function ze(t,e,s){const i=xe,n=be,o=Ee,r=Se;return e.vsub(t.position,i),i.cross(s,n),t.invInertiaWorld.vmult(n,r),r.cross(i,o),t.invMass+s.dot(o)}const Ce=new o,Ae=new o,Be=new o;function Re(t,e,s,i,n){if(n.lengthSquared()>1.1)return 0;const o=Ce,r=Ae,a=Be;return t.getVelocityAtWorldPoint(e,o),s.getVelocityAtWorldPoint(i,r),o.vsub(r,a),-.2*n.dot(a)*(1/(t.invMass+s.invMass))}new o,new o,new o,new o,new o,new o,new o,new o,new o;class Me extends x{constructor(t,e,s,i){if(void 0===t&&(t=1),void 0===e&&(e=1),void 0===s&&(s=1),void 0===i&&(i=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const n=i,r=[],a=[],l=[],h=[],c=[],u=Math.cos,d=Math.sin;r.push(new o(-e*d(0),.5*-s,e*u(0))),h.push(0),r.push(new o(-t*d(0),.5*s,t*u(0))),c.push(1);for(let i=0;i<n;i++){const p=2*Math.PI/n*(i+1),y=2*Math.PI/n*(i+.5);i<n-1?(r.push(new o(-e*d(p),.5*-s,e*u(p))),h.push(2*i+2),r.push(new o(-t*d(p),.5*s,t*u(p))),c.push(2*i+3),l.push([2*i,2*i+1,2*i+3,2*i+2])):l.push([2*i,2*i+1,1,0]),(n%2==1||i<n/2)&&a.push(new o(-d(y),0,u(y)))}l.push(h),a.push(new o(0,1,0));const p=[];for(let t=0;t<c.length;t++)p.push(c[c.length-t-1]);l.push(p),super({vertices:r,faces:l,axes:a}),this.type=f.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=i}}class Ie extends f{constructor(){super({type:f.types.PLANE}),this.worldNormal=new o,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return void 0===e&&(e=new o),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){Fe.set(0,0,1),e.vmult(Fe,Fe);const n=Number.MAX_VALUE;s.set(-n,-n,-n),i.set(n,n,n),1===Fe.x?i.x=t.x:-1===Fe.x&&(s.x=t.x),1===Fe.y?i.y=t.y:-1===Fe.y&&(s.y=t.y),1===Fe.z?i.z=t.z:-1===Fe.z&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const Fe=new o;class Te extends f{constructor(t,e){void 0===e&&(e={}),e=Tt.defaults(e,{maxValue:null,minValue:null,elementSize:1}),super({type:f.types.HEIGHTFIELD}),this.data=t,this.maxValue=e.maxValue,this.minValue=e.minValue,this.elementSize=e.elementSize,null===e.minValue&&this.updateMinValue(),null===e.maxValue&&this.updateMaxValue(),this.cacheEnabled=!0,this.pillarConvex=new x,this.pillarOffset=new o,this.updateBoundingSphereRadius(),this._cachedPillars={}}update(){this._cachedPillars={}}updateMinValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const n=t[s][i];n<e&&(e=n)}this.minValue=e}updateMaxValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const n=t[s][i];n>e&&(e=n)}this.maxValue=e}setHeightValueAtIndex(t,e,s){this.data[t][e]=s,this.clearCachedConvexTrianglePillar(t,e,!1),t>0&&(this.clearCachedConvexTrianglePillar(t-1,e,!0),this.clearCachedConvexTrianglePillar(t-1,e,!1)),e>0&&(this.clearCachedConvexTrianglePillar(t,e-1,!0),this.clearCachedConvexTrianglePillar(t,e-1,!1)),e>0&&t>0&&this.clearCachedConvexTrianglePillar(t-1,e-1,!0)}getRectMinMax(t,e,s,i,n){void 0===n&&(n=[]);const o=this.data;let r=this.minValue;for(let n=t;n<=s;n++)for(let t=e;t<=i;t++){const e=o[n][t];e>r&&(r=e)}n[0]=this.minValue,n[1]=r}getIndexOfPosition(t,e,s,i){const n=this.elementSize,o=this.data;let r=Math.floor(t/n),a=Math.floor(e/n);return s[0]=r,s[1]=a,i&&(r<0&&(r=0),a<0&&(a=0),r>=o.length-1&&(r=o.length-1),a>=o[0].length-1&&(a=o[0].length-1)),!(r<0||a<0||r>=o.length-1||a>=o[0].length-1)}getTriangleAt(t,e,s,i,n,o){const r=Pe;this.getIndexOfPosition(t,e,r,s);let a=r[0],l=r[1];const h=this.data;s&&(a=Math.min(h.length-2,Math.max(0,a)),l=Math.min(h[0].length-2,Math.max(0,l)));const c=this.elementSize,u=(t/c-a)**2+(e/c-l)**2>(t/c-(a+1))**2+(e/c-(l+1))**2;return this.getTriangle(a,l,u,i,n,o),u}getNormalAt(t,e,s,i){const n=je,o=Ve,r=ke,a=Oe,l=He;this.getTriangleAt(t,e,s,n,o,r),o.vsub(n,a),r.vsub(n,l),a.cross(l,i),i.normalize()}getAabbAtIndex(t,e,s){let{lowerBound:i,upperBound:n}=s;const o=this.data,r=this.elementSize;i.set(t*r,e*r,o[t][e]),n.set((t+1)*r,(e+1)*r,o[t+1][e+1])}getHeightAt(t,e,s){const i=this.data,n=Le,o=qe,r=We,a=Pe;this.getIndexOfPosition(t,e,a,s);let l=a[0],h=a[1];s&&(l=Math.min(i.length-2,Math.max(0,l)),h=Math.min(i[0].length-2,Math.max(0,h)));const c=this.getTriangleAt(t,e,s,n,o,r);!function(t,e,s,i,n,o,r,a,l){l.x=((o-a)*(t-r)+(r-n)*(e-a))/((o-a)*(s-r)+(r-n)*(i-a)),l.y=((a-i)*(t-r)+(s-r)*(e-a))/((o-a)*(s-r)+(r-n)*(i-a)),l.z=1-l.x-l.y}(t,e,n.x,n.y,o.x,o.y,r.x,r.y,Ne);const u=Ne;return c?i[l+1][h+1]*u.x+i[l][h+1]*u.y+i[l+1][h]*u.z:i[l][h]*u.x+i[l+1][h]*u.y+i[l][h+1]*u.z}getCacheConvexTrianglePillarKey(t,e,s){return`${t}_${e}_${s?1:0}`}getCachedConvexTrianglePillar(t,e,s){return this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}setCachedConvexTrianglePillar(t,e,s,i,n){this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]={convex:i,offset:n}}clearCachedConvexTrianglePillar(t,e,s){delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}getTriangle(t,e,s,i,n,o){const r=this.data,a=this.elementSize;s?(i.set((t+1)*a,(e+1)*a,r[t+1][e+1]),n.set(t*a,(e+1)*a,r[t][e+1]),o.set((t+1)*a,e*a,r[t+1][e])):(i.set(t*a,e*a,r[t][e]),n.set((t+1)*a,e*a,r[t+1][e]),o.set(t*a,(e+1)*a,r[t][e+1]))}getConvexTrianglePillar(t,e,s){let i=this.pillarConvex,n=this.pillarOffset;if(this.cacheEnabled){const r=this.getCachedConvexTrianglePillar(t,e,s);if(r)return this.pillarConvex=r.convex,void(this.pillarOffset=r.offset);i=new x,n=new o,this.pillarConvex=i,this.pillarOffset=n}const r=this.data,a=this.elementSize,l=i.faces;i.vertices.length=6;for(let t=0;t<6;t++)i.vertices[t]||(i.vertices[t]=new o);l.length=5;for(let t=0;t<5;t++)l[t]||(l[t]=[]);const h=i.vertices,c=(Math.min(r[t][e],r[t+1][e],r[t][e+1],r[t+1][e+1])-this.minValue)/2+this.minValue;s?(n.set((t+.75)*a,(e+.75)*a,c),h[0].set(.25*a,.25*a,r[t+1][e+1]-c),h[1].set(-.75*a,.25*a,r[t][e+1]-c),h[2].set(.25*a,-.75*a,r[t+1][e]-c),h[3].set(.25*a,.25*a,-Math.abs(c)-1),h[4].set(-.75*a,.25*a,-Math.abs(c)-1),h[5].set(.25*a,-.75*a,-Math.abs(c)-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=2,l[2][1]=5,l[2][2]=3,l[2][3]=0,l[3][0]=3,l[3][1]=4,l[3][2]=1,l[3][3]=0,l[4][0]=1,l[4][1]=4,l[4][2]=5,l[4][3]=2):(n.set((t+.25)*a,(e+.25)*a,c),h[0].set(-.25*a,-.25*a,r[t][e]-c),h[1].set(.75*a,-.25*a,r[t+1][e]-c),h[2].set(-.25*a,.75*a,r[t][e+1]-c),h[3].set(-.25*a,-.25*a,-Math.abs(c)-1),h[4].set(.75*a,-.25*a,-Math.abs(c)-1),h[5].set(-.25*a,.75*a,-Math.abs(c)-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=0,l[2][1]=2,l[2][2]=5,l[2][3]=3,l[3][0]=1,l[3][1]=0,l[3][2]=3,l[3][3]=4,l[4][0]=4,l[4][1]=5,l[4][2]=2,l[4][3]=1),i.computeNormals(),i.computeEdges(),i.updateBoundingSphereRadius(),this.setCachedConvexTrianglePillar(t,e,s,i,n)}calculateLocalInertia(t,e){return void 0===e&&(e=new o),e.set(0,0,0),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){s.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),i.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)}updateBoundingSphereRadius(){const t=this.data,e=this.elementSize;this.boundingSphereRadius=new o(t.length*e,t[0].length*e,Math.max(Math.abs(this.maxValue),Math.abs(this.minValue))).length()}setHeightsFromImage(t,e){const{x:s,z:i,y:n}=e,o=document.createElement("canvas");o.width=t.width,o.height=t.height;const r=o.getContext("2d");r.drawImage(t,0,0);const a=r.getImageData(0,0,t.width,t.height),l=this.data;l.length=0,this.elementSize=Math.abs(s)/a.width;for(let t=0;t<a.height;t++){const e=[];for(let n=0;n<a.width;n++){const o=(a.data[4*(t*a.height+n)]+a.data[4*(t*a.height+n)+1]+a.data[4*(t*a.height+n)+2])/4/255*i;s<0?e.push(o):e.unshift(o)}n<0?l.unshift(e):l.push(e)}this.updateMaxValue(),this.updateMinValue(),this.update()}}const Pe=[],Ne=new o,Le=new o,qe=new o,We=new o,je=new o,Ve=new o,ke=new o,Oe=new o,He=new o;new o,new h,new o,new h,new o,new o,new o,new o,new o,new o,new o,new h,new o,new w,new h;class De{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){!t.enabled||t.bi.isTrigger||t.bj.isTrigger||this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);-1!==s&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class _e extends De{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,n=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,h=t;let c,u,d,p,y,v;if(0!==r)for(let t=0;t!==l;t++)a[t].updateSolveMassProperties();const m=Ge,f=Xe,w=Ue;m.length=r,f.length=r,w.length=r;for(let t=0;t!==r;t++){const e=o[t];w[t]=0,f[t]=e.computeB(h),m[t]=1/e.computeC()}if(0!==r){for(let t=0;t!==l;t++){const e=a[t],s=e.vlambda,i=e.wlambda;s.set(0,0,0),i.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let t=0;t!==r;t++){const e=o[t];c=f[t],u=m[t],v=w[t],y=e.computeGWlambda(),d=u*(c-y-e.eps*v),v+d<e.minForce?d=e.minForce-v:v+d>e.maxForce&&(d=e.maxForce-v),w[t]+=d,p+=d>0?d:-d,e.addToWlambda(d)}if(p*p<n)break}for(let t=0;t!==l;t++){const e=a[t],s=e.velocity,i=e.angularVelocity;e.vlambda.vmul(e.linearFactor,e.vlambda),s.vadd(e.vlambda,s),e.wlambda.vmul(e.angularFactor,e.wlambda),i.vadd(e.wlambda,i)}let t=o.length;const e=1/h;for(;t--;)o[t].multiplier=w[t]*e}return s}}const Ue=[],Ge=[],Xe=[];R.STATIC;class Ye{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class $e extends Ye{constructor(){super(...arguments),this.type=o}constructObject(){return new o}}const Ke=f.types.SPHERE,Ze=f.types.SPHERE|f.types.PLANE,Qe=f.types.BOX|f.types.BOX,Je=f.types.SPHERE|f.types.BOX,ts=f.types.PLANE|f.types.BOX,es=f.types.CONVEXPOLYHEDRON,ss=f.types.SPHERE|f.types.CONVEXPOLYHEDRON,is=f.types.PLANE|f.types.CONVEXPOLYHEDRON,ns=f.types.BOX|f.types.CONVEXPOLYHEDRON,os=f.types.SPHERE|f.types.HEIGHTFIELD,rs=f.types.BOX|f.types.HEIGHTFIELD,as=f.types.CONVEXPOLYHEDRON|f.types.HEIGHTFIELD,ls=f.types.PARTICLE|f.types.SPHERE,hs=f.types.PLANE|f.types.PARTICLE,cs=f.types.BOX|f.types.PARTICLE,us=f.types.PARTICLE|f.types.CONVEXPOLYHEDRON,ds=f.types.CYLINDER,ps=f.types.SPHERE|f.types.CYLINDER,ys=f.types.PLANE|f.types.CYLINDER,vs=f.types.BOX|f.types.CYLINDER,ms=f.types.CONVEXPOLYHEDRON|f.types.CYLINDER,fs=f.types.HEIGHTFIELD|f.types.CYLINDER,ws=f.types.PARTICLE|f.types.CYLINDER,gs=f.types.SPHERE|f.types.TRIMESH,xs=f.types.PLANE|f.types.TRIMESH;class bs{get[Ke](){return this.sphereSphere}get[Ze](){return this.spherePlane}get[Qe](){return this.boxBox}get[Je](){return this.sphereBox}get[ts](){return this.planeBox}get[es](){return this.convexConvex}get[ss](){return this.sphereConvex}get[is](){return this.planeConvex}get[ns](){return this.boxConvex}get[os](){return this.sphereHeightfield}get[rs](){return this.boxHeightfield}get[as](){return this.convexHeightfield}get[ls](){return this.sphereParticle}get[hs](){return this.planeParticle}get[cs](){return this.boxParticle}get[us](){return this.convexParticle}get[ds](){return this.convexConvex}get[ps](){return this.sphereConvex}get[ys](){return this.planeConvex}get[vs](){return this.boxConvex}get[ms](){return this.convexConvex}get[fs](){return this.heightfieldCylinder}get[ws](){return this.particleCylinder}get[gs](){return this.sphereTrimesh}get[xs](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new $e,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,n,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Ht(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,h=i.material||e.material;return l&&h&&l.restitution>=0&&h.restitution>=0&&(r.restitution=l.restitution*h.restitution),r.si=n||s,r.sj=o||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,n=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const h=n.material||s.material,c=o.material||i.material;if(h&&c&&h.friction>=0&&c.friction>=0&&(l=h.friction*c.friction),l>0){const n=l*(r.frictionGravity||r.gravity).length();let o=s.invMass+i.invMass;o>0&&(o=1/o);const h=this.frictionEquationPool,c=h.length?h.pop():new Zt(s,i,n*o),u=h.length?h.pop():new Zt(s,i,n*o);return c.bi=u.bi=s,c.bj=u.bj=i,c.minForce=u.minForce=-n*o,c.maxForce=u.maxForce=n*o,c.ri.copy(t.ri),c.rj.copy(t.rj),u.ri.copy(t.ri),u.rj.copy(t.rj),t.ni.tangents(c.t,u.t),c.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),c.enabled=u.enabled=t.enabled,e.push(c,u),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];Es.setZero(),Ss.setZero(),zs.setZero();const n=e.bi;e.bj;for(let s=0;s!==t;s++)e=this.result[this.result.length-1-s],e.bi!==n?(Es.vadd(e.ni,Es),Ss.vadd(e.ri,Ss),zs.vadd(e.rj,zs)):(Es.vsub(e.ni,Es),Ss.vadd(e.rj,Ss),zs.vadd(e.ri,zs));const o=1/t;Ss.scale(o,s.ri),zs.scale(o,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),Es.normalize(),Es.tangents(s.t,i.t)}getContacts(t,e,s,i,n,o,r){this.contactPointPool=n,this.frictionEquationPool=r,this.result=i,this.frictionResult=o;const a=Bs,l=Rs,h=Cs,c=As;for(let i=0,n=t.length;i!==n;i++){const n=t[i],o=e[i];let r=null;n.material&&o.material&&(r=s.getContactMaterial(n.material,o.material)||null);const u=n.type&R.KINEMATIC&&o.type&R.STATIC||n.type&R.STATIC&&o.type&R.KINEMATIC||n.type&R.KINEMATIC&&o.type&R.KINEMATIC;for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],a),n.quaternion.vmult(n.shapeOffsets[t],h),h.vadd(n.position,h);const e=n.shapes[t];for(let t=0;t<o.shapes.length;t++){o.quaternion.mult(o.shapeOrientations[t],l),o.quaternion.vmult(o.shapeOffsets[t],c),c.vadd(o.position,c);const i=o.shapes[t];if(!(e.collisionFilterMask&i.collisionFilterGroup&&i.collisionFilterMask&e.collisionFilterGroup))continue;if(h.distanceTo(c)>e.boundingSphereRadius+i.boundingSphereRadius)continue;let d=null;e.material&&i.material&&(d=s.getContactMaterial(e.material,i.material)||null),this.currentContactMaterial=d||r||s.defaultContactMaterial;const p=this[e.type|i.type];if(p){let t=!1;t=e.type<i.type?p.call(this,e,i,h,c,a,l,n,o,e,i,u):p.call(this,i,e,c,h,l,a,o,n,e,i,u),t&&u&&(s.shapeOverlapKeeper.set(e.id,i.id),s.bodyOverlapKeeper.set(n.id,o.id))}}}}}sphereSphere(t,e,s,i,n,o,r,a,l,h,c){if(c)return s.distanceSquared(i)<(t.radius+e.radius)**2;const u=this.createContactEquation(r,a,t,e,l,h);i.vsub(s,u.ni),u.ni.normalize(),u.ri.copy(u.ni),u.rj.copy(u.ni),u.ri.scale(t.radius,u.ri),u.rj.scale(-e.radius,u.rj),u.ri.vadd(s,u.ri),u.ri.vsub(r.position,u.ri),u.rj.vadd(i,u.rj),u.rj.vsub(a.position,u.rj),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}spherePlane(t,e,s,i,n,o,r,a,l,h,c){const u=this.createContactEquation(r,a,t,e,l,h);if(u.ni.set(0,0,1),o.vmult(u.ni,u.ni),u.ni.negate(u.ni),u.ni.normalize(),u.ni.scale(t.radius,u.ri),s.vsub(i,Xs),u.ni.scale(u.ni.dot(Xs),Ys),Xs.vsub(Ys,u.rj),-Xs.dot(u.ni)<=t.radius){if(c)return!0;const t=u.ri,e=u.rj;t.vadd(s,t),t.vsub(r.position,t),e.vadd(i,e),e.vsub(a.position,e),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}boxBox(t,e,s,i,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,n,o,r,a,t,e,c)}sphereBox(t,e,s,i,n,o,r,a,l,h,c){const u=this.v3pool,d=ii;s.vsub(i,Js),e.getSideNormals(d,o);const p=t.radius;let y=!1;const v=oi,m=ri,f=ai;let w=null,g=0,x=0,b=0,E=null;for(let t=0,e=d.length;t!==e&&!1===y;t++){const e=ti;e.copy(d[t]);const s=e.length();e.normalize();const i=Js.dot(e);if(i<s+p&&i>0){const n=ei,o=si;n.copy(d[(t+1)%3]),o.copy(d[(t+2)%3]);const r=n.length(),a=o.length();n.normalize(),o.normalize();const l=Js.dot(n),h=Js.dot(o);if(l<r&&l>-r&&h<a&&h>-a){const t=Math.abs(i-s-p);if((null===E||t<E)&&(E=t,x=l,b=h,w=s,v.copy(e),m.copy(n),f.copy(o),g++,c))return!0}}}if(g){y=!0;const n=this.createContactEquation(r,a,t,e,l,h);v.scale(-p,n.ri),n.ni.copy(v),n.ni.negate(n.ni),v.scale(w,v),m.scale(x,m),v.vadd(m,v),f.scale(b,f),v.vadd(f,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}let S=u.get();const z=ni;for(let n=0;2!==n&&!y;n++)for(let o=0;2!==o&&!y;o++)for(let u=0;2!==u&&!y;u++)if(S.set(0,0,0),n?S.vadd(d[0],S):S.vsub(d[0],S),o?S.vadd(d[1],S):S.vsub(d[1],S),u?S.vadd(d[2],S):S.vsub(d[2],S),i.vadd(S,z),z.vsub(s,z),z.lengthSquared()<p*p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);n.ri.copy(z),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(p,n.ri),n.rj.copy(S),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}u.release(S),S=null;const C=u.get(),A=u.get(),B=u.get(),R=u.get(),M=u.get(),I=d.length;for(let n=0;n!==I&&!y;n++)for(let o=0;o!==I&&!y;o++)if(n%3!=o%3){d[o].cross(d[n],C),C.normalize(),d[n].vadd(d[o],A),B.copy(s),B.vsub(A,B),B.vsub(i,B);const u=B.dot(C);C.scale(u,R);let v=0;for(;v===n%3||v===o%3;)v++;M.copy(s),M.vsub(R,M),M.vsub(A,M),M.vsub(i,M);const m=Math.abs(u),f=M.length();if(m<d[v].length()&&f<p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);A.vadd(R,n.rj),n.rj.copy(n.rj),M.negate(n.ni),n.ni.normalize(),n.ri.copy(n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(s,n.ri),n.ri.normalize(),n.ri.scale(p,n.ri),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}u.release(C,A,B,R,M)}planeBox(t,e,s,i,n,o,r,a,l,h,c){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,n,o,r,a,t,e,c)}convexConvex(t,e,s,i,n,o,r,a,l,h,c,u,d){const p=Ei;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,n,i,o,p,u,d)){const u=[],d=Si;t.clipAgainstHull(s,n,e,i,o,p,-100,100,u);let y=0;for(let n=0;n!==u.length;n++){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h),v=o.ri,m=o.rj;p.negate(o.ni),u[n].normal.negate(d),d.scale(u[n].depth,d),u[n].point.vadd(d,v),m.copy(u[n].point),v.vsub(s,v),m.vsub(i,m),v.vadd(s,v),v.vsub(r.position,v),m.vadd(i,m),m.vsub(a.position,m),this.result.push(o),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,s,i,n,o,r,a,l,h,c){const u=this.v3pool;s.vsub(i,li);const d=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let m=!1;for(let n=0;n!==y.length;n++){const u=y[n],d=di;o.vmult(u,d),i.vadd(d,d);const p=ui;if(d.vsub(s,p),p.lengthSquared()<v*v){if(c)return!0;m=!0;const n=this.createContactEquation(r,a,t,e,l,h);return n.ri.copy(p),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(v,n.ri),d.vsub(i,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),void this.createFrictionEquationsFromContact(n,this.frictionResult)}}for(let n=0,f=p.length;n!==f&&!1===m;n++){const f=d[n],w=p[n],g=pi;o.vmult(f,g);const x=yi;o.vmult(y[w[0]],x),x.vadd(i,x);const b=vi;g.scale(-v,b),s.vadd(b,b);const E=mi;b.vsub(x,E);const S=E.dot(g),z=fi;if(s.vsub(x,z),S<0&&z.dot(g)>0){const n=[];for(let t=0,e=w.length;t!==e;t++){const e=u.get();o.vmult(y[w[t]],e),i.vadd(e,e),n.push(e)}if(Qs(n,g,s)){if(c)return!0;m=!0;const o=this.createContactEquation(r,a,t,e,l,h);g.scale(-v,o.ri),g.negate(o.ni);const d=u.get();g.scale(-S,d);const p=u.get();g.scale(-v,p),s.vsub(i,o.rj),o.rj.vadd(p,o.rj),o.rj.vadd(d,o.rj),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),u.release(d),u.release(p),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)u.release(n[t]);return}for(let d=0;d!==w.length;d++){const p=u.get(),m=u.get();o.vmult(y[w[(d+1)%w.length]],p),o.vmult(y[w[(d+2)%w.length]],m),i.vadd(p,p),i.vadd(m,m);const f=hi;m.vsub(p,f);const g=ci;f.unit(g);const x=u.get(),b=u.get();s.vsub(p,b);const E=b.dot(g);g.scale(E,x),x.vadd(p,x);const S=u.get();if(x.vsub(s,S),E>0&&E*E<f.lengthSquared()&&S.lengthSquared()<v*v){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h);x.vsub(i,o.rj),x.vsub(s,o.ni),o.ni.normalize(),o.ni.scale(v,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)u.release(n[t]);return u.release(p),u.release(m),u.release(x),u.release(S),void u.release(b)}u.release(p),u.release(m),u.release(x),u.release(S),u.release(b)}for(let t=0,e=n.length;t!==e;t++)u.release(n[t])}}}planeConvex(t,e,s,i,n,o,r,a,l,h,c){const u=wi,d=gi;d.set(0,0,1),n.vmult(d,d);let p=0;const y=xi;for(let n=0;n!==e.vertices.length;n++)if(u.copy(e.vertices[n]),o.vmult(u,u),i.vadd(u,u),u.vsub(s,y),d.dot(y)<=0){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h),o=bi;d.scale(d.dot(y),o),u.vsub(o,o),o.vsub(s,n.ri),n.ni.copy(d),u.vsub(i,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,n,o,r,a,t,e,c)}sphereHeightfield(t,e,s,i,n,o,r,a,l,h,c){const u=e.data,d=t.radius,p=e.elementSize,y=Wi,v=qi;w.pointToLocalFrame(i,o,s,v);let m=Math.floor((v.x-d)/p)-1,f=Math.ceil((v.x+d)/p)+1,g=Math.floor((v.y-d)/p)-1,x=Math.ceil((v.y+d)/p)+1;if(f<0||x<0||m>u.length||g>u[0].length)return;m<0&&(m=0),f<0&&(f=0),g<0&&(g=0),x<0&&(x=0),m>=u.length&&(m=u.length-1),f>=u.length&&(f=u.length-1),x>=u[0].length&&(x=u[0].length-1),g>=u[0].length&&(g=u[0].length-1);const b=[];e.getRectMinMax(m,g,f,x,b);const E=b[0],S=b[1];if(v.z-d>S||v.z+d<E)return;const z=this.result;for(let l=m;l<f;l++)for(let h=g;h<x;h++){const u=z.length;let d=!1;if(e.getConvexTrianglePillar(l,h,!1),w.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,s,y,n,o,r,a,t,e,c)),c&&d)return!0;if(e.getConvexTrianglePillar(l,h,!0),w.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,s,y,n,o,r,a,t,e,c)),c&&d)return!0;if(z.length-u>2)return}}boxHeightfield(t,e,s,i,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,n,o,r,a,t,e,c)}convexHeightfield(t,e,s,i,n,o,r,a,l,h,c){const u=e.data,d=e.elementSize,p=t.boundingSphereRadius,y=Ni,v=Li,m=Pi;w.pointToLocalFrame(i,o,s,m);let f=Math.floor((m.x-p)/d)-1,g=Math.ceil((m.x+p)/d)+1,x=Math.floor((m.y-p)/d)-1,b=Math.ceil((m.y+p)/d)+1;if(g<0||b<0||f>u.length||x>u[0].length)return;f<0&&(f=0),g<0&&(g=0),x<0&&(x=0),b<0&&(b=0),f>=u.length&&(f=u.length-1),g>=u.length&&(g=u.length-1),b>=u[0].length&&(b=u[0].length-1),x>=u[0].length&&(x=u[0].length-1);const E=[];e.getRectMinMax(f,x,g,b,E);const S=E[0],z=E[1];if(!(m.z-p>z||m.z+p<S))for(let l=f;l<g;l++)for(let h=x;h<b;h++){let u=!1;if(e.getConvexTrianglePillar(l,h,!1),w.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,s,y,n,o,r,a,null,null,c,v,null)),c&&u)return!0;if(e.getConvexTrianglePillar(l,h,!0),w.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,s,y,n,o,r,a,null,null,c,v,null)),c&&u)return!0}}sphereParticle(t,e,s,i,n,o,r,a,l,h,c){const u=Bi;if(u.set(0,0,1),i.vsub(s,u),u.lengthSquared()<=t.radius*t.radius){if(c)return!0;const s=this.createContactEquation(a,r,e,t,l,h);u.normalize(),s.rj.copy(u),s.rj.scale(t.radius,s.rj),s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}planeParticle(t,e,s,i,n,o,r,a,l,h,c){const u=zi;u.set(0,0,1),r.quaternion.vmult(u,u);const d=Ci;if(i.vsub(r.position,d),u.dot(d)<=0){if(c)return!0;const s=this.createContactEquation(a,r,e,t,l,h);s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0);const n=Ai;u.scale(u.dot(i),n),i.vsub(n,n),s.rj.copy(n),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}boxParticle(t,e,s,i,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,n,o,r,a,t,e,c)}convexParticle(t,e,s,i,n,o,r,a,l,h,c){let u=-1;const d=Ii,p=Ti;let y=null;const v=Mi;if(v.copy(i),v.vsub(s,v),n.conjugate(Ri),Ri.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,n),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(n);for(let e=0,s=t.faces.length;e!==s;e++){const s=[t.worldVertices[t.faces[e][0]]],n=t.worldFaceNormals[e];i.vsub(s[0],Fi);const o=-n.dot(Fi);if(null===y||Math.abs(o)<Math.abs(y)){if(c)return!0;y=o,u=e,d.copy(n)}}if(-1!==u){const n=this.createContactEquation(a,r,e,t,l,h);d.scale(y,p),p.vadd(i,p),p.vsub(s,p),n.rj.copy(p),d.negate(n.ni),n.ri.set(0,0,0);const o=n.ri,c=n.rj;o.vadd(i,o),o.vsub(a.position,o),c.vadd(s,c),c.vsub(r.position,c),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,i,n,o,r,a,l,h,c){return this.convexHeightfield(e,t,i,s,o,n,a,r,l,h,c)}particleCylinder(t,e,s,i,n,o,r,a,l,h,c){return this.convexParticle(e,t,i,s,o,n,a,r,l,h,c)}sphereTrimesh(t,e,s,i,n,o,r,a,l,h,c){const u=qs,d=Ws,p=js,y=Vs,v=ks,m=Os,f=Us,g=Ls,x=Ps,b=Gs;w.pointToLocalFrame(i,o,s,v);const E=t.radius;f.lowerBound.set(v.x-E,v.y-E,v.z-E),f.upperBound.set(v.x+E,v.y+E,v.z+E),e.getTrianglesInAABB(f,b);const S=Ns,z=t.radius*t.radius;for(let n=0;n<b.length;n++)for(let u=0;u<3;u++)if(e.getVertex(e.indices[3*b[n]+u],S),S.vsub(v,x),x.lengthSquared()<=z){if(g.copy(S),w.pointToWorldFrame(i,o,g,S),S.vsub(s,x),c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);n.ni.copy(x),n.ni.normalize(),n.ri.copy(n.ni),n.ri.scale(t.radius,n.ri),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.copy(S),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}for(let n=0;n<b.length;n++)for(let f=0;f<3;f++){e.getVertex(e.indices[3*b[n]+f],u),e.getVertex(e.indices[3*b[n]+(f+1)%3],d),d.vsub(u,p),v.vsub(d,m);const g=m.dot(p);v.vsub(u,m);let x=m.dot(p);if(x>0&&g<0&&(v.vsub(u,m),y.copy(p),y.normalize(),x=m.dot(y),y.scale(x,m),m.vadd(u,m),m.distanceTo(v)<t.radius)){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h);m.vsub(v,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),w.pointToWorldFrame(i,o,m,m),m.vsub(a.position,n.rj),w.vectorToWorldFrame(o,n.ni,n.ni),w.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}const C=Hs,A=Ds,B=_s,R=Ts;for(let n=0,u=b.length;n!==u;n++){e.getTriangleVertices(b[n],C,A,B),e.getNormal(b[n],R),v.vsub(C,m);let u=m.dot(R);if(R.scale(u,m),v.vsub(m,m),u=m.distanceTo(v),st.pointInTriangle(m,C,A,B)&&u<t.radius){if(c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);m.vsub(v,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),w.pointToWorldFrame(i,o,m,m),m.vsub(a.position,n.rj),w.vectorToWorldFrame(o,n.ni,n.ni),w.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,i,n,r,a,l,h,c,u){const d=new o,p=Ms;p.set(0,0,1),n.vmult(p,p);for(let n=0;n<e.vertices.length/3;n++){e.getVertex(n,d);const y=new o;y.copy(d),w.pointToWorldFrame(i,r,y,d);const v=Is;if(d.vsub(s,v),p.dot(v)<=0){if(u)return!0;const s=this.createContactEquation(a,l,t,e,h,c);s.ni.copy(p);const i=Fs;p.scale(v.dot(p),i),d.vsub(i,i),s.ri.copy(i),s.ri.vsub(a.position,s.ri),s.rj.copy(d),s.rj.vsub(l.position,s.rj),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}}}const Es=new o,Ss=new o,zs=new o,Cs=new o,As=new o,Bs=new y,Rs=new y,Ms=new o,Is=new o,Fs=new o,Ts=new o,Ps=new o;new o;const Ns=new o,Ls=new o,qs=new o,Ws=new o,js=new o,Vs=new o,ks=new o,Os=new o,Hs=new o,Ds=new o,_s=new o,Us=new h,Gs=[],Xs=new o,Ys=new o,$s=new o,Ks=new o,Zs=new o;function Qs(t,e,s){let i=null;const n=t.length;for(let o=0;o!==n;o++){const r=t[o],a=$s;t[(o+1)%n].vsub(r,a);const l=Ks;a.cross(e,l);const h=Zs;s.vsub(r,h);const c=l.dot(h);if(!(null===i||c>0&&!0===i||c<=0&&!1===i))return!1;null===i&&(i=c>0)}return!0}const Js=new o,ti=new o,ei=new o,si=new o,ii=[new o,new o,new o,new o,new o,new o],ni=new o,oi=new o,ri=new o,ai=new o,li=new o,hi=new o,ci=new o,ui=new o,di=new o,pi=new o,yi=new o,vi=new o,mi=new o,fi=new o;new o,new o;const wi=new o,gi=new o,xi=new o,bi=new o,Ei=new o,Si=new o,zi=new o,Ci=new o,Ai=new o,Bi=new o,Ri=new y,Mi=new o;new o;const Ii=new o,Fi=new o,Ti=new o,Pi=new o,Ni=new o,Li=[0],qi=new o,Wi=new o;class ji{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let n=0;for(;s>i[n];)n++;if(s!==i[n]){for(let t=i.length-1;t>=n;t--)i[t+1]=i[t];i[n]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,n=s.length,o=i.length;let r=0;for(let e=0;e<n;e++){let n=!1;const o=s[e];for(;o>i[r];)r++;n=o===i[r],n||Vi(t,o)}r=0;for(let t=0;t<o;t++){let n=!1;const o=i[t];for(;o>s[r];)r++;n=s[r]===o,n||Vi(e,o)}}}function Vi(t,e){t.push((4294901760&e)>>16,65535&e)}const ki=(t,e)=>t<e?`${t}-${e}`:`${e}-${t}`;class Oi{constructor(){this.data={keys:[]}}get(t,e){const s=ki(t,e);return this.data[s]}set(t,e,s){const i=ki(t,e);this.get(t,e)||this.data.keys.push(i),this.data[i]=s}delete(t,e){const s=ki(t,e),i=this.data.keys.indexOf(s);-1!==i&&this.data.keys.splice(i,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;)delete t[e.pop()]}}class Hi extends p{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new o,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new o,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=void 0!==t.broadphase?t.broadphase:new X,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new _e,this.constraints=[],this.narrowphase=new bs(this),this.collisionMatrix=new d,this.collisionMatrixPrevious=new d,this.bodyOverlapKeeper=new ji,this.shapeOverlapKeeper=new ji,this.contactmaterials=[],this.contactMaterialTable=new Oi,this.defaultMaterial=new ee("default"),this.defaultContactMaterial=new te(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Y?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,i){return void 0===s&&(s={}),s.mode=st.ALL,s.from=t,s.to=e,s.callback=i,Di.intersectWorld(this,s)}raycastAny(t,e,s,i){return void 0===s&&(s={}),s.mode=st.ANY,s.from=t,s.to=e,s.result=i,Di.intersectWorld(this,s)}raycastClosest(t,e,s,i){return void 0===s&&(s={}),s.mode=st.CLOSEST,s.from=t,s.to=e,s.result=i,Di.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof R&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(-1!==i){s.splice(i,1);for(let t=0;t!==s.length;t++)s[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const i=e[s].shapes;for(let e=0;e<i.length;e++){const s=i[e];if(s.id===t)return s}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const s=_i.now()/1e3;if(this.lastCallTime){const i=s-this.lastCallTime;this.step(t,i,e)}else this.step(t,void 0,e);this.lastCallTime=s}step(t,e,s){if(void 0===s&&(s=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const i=_i.now();let n=0;for(;this.accumulator>=t&&n<s&&(this.internalStep(t),this.accumulator-=t,n++,!(_i.now()-i>1e3*t)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,o,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,o,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Ki,i=Zi,n=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,h=this.profile,c=R.DYNAMIC;let u=-1/0;const d=this.constraints,p=$i;a.length();const y=a.x,v=a.y,m=a.z;let f=0;for(l&&(u=_i.now()),f=0;f!==n;f++){const t=o[f];if(t.type===c){const e=t.force,s=t.mass;e.x+=s*y,e.y+=s*v,e.z+=s*m}}for(let t=0,e=this.subsystems.length;t!==e;t++)this.subsystems[t].update();l&&(u=_i.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),l&&(h.broadphase=_i.now()-u);let w=d.length;for(f=0;f!==w;f++){const t=d[f];if(!t.collideConnected)for(let e=s.length-1;e>=0;e-=1)(t.bodyA===s[e]&&t.bodyB===i[e]||t.bodyB===s[e]&&t.bodyA===i[e])&&(s.splice(e,1),i.splice(e,1))}this.collisionMatrixTick(),l&&(u=_i.now());const g=Yi,x=e.length;for(f=0;f!==x;f++)g.push(e[f]);e.length=0;const b=this.frictionEquations.length;for(f=0;f!==b;f++)p.push(this.frictionEquations[f]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,g,this.frictionEquations,p),l&&(h.narrowphase=_i.now()-u),l&&(u=_i.now()),f=0;f<this.frictionEquations.length;f++)r.addEquation(this.frictionEquations[f]);const E=e.length;for(let t=0;t!==E;t++){const s=e[t],i=s.bi,n=s.bj,o=s.si,a=s.sj;let l;l=i.material&&n.material&&this.getContactMaterial(i.material,n.material)||this.defaultContactMaterial,l.friction,i.material&&n.material&&(i.material.friction>=0&&n.material.friction>=0&&(i.material.friction,n.material.friction),i.material.restitution>=0&&n.material.restitution>=0&&(s.restitution=i.material.restitution*n.material.restitution)),r.addEquation(s),i.allowSleep&&i.type===R.DYNAMIC&&i.sleepState===R.SLEEPING&&n.sleepState===R.AWAKE&&n.type!==R.STATIC&&n.velocity.lengthSquared()+n.angularVelocity.lengthSquared()>=2*n.sleepSpeedLimit**2&&(i.wakeUpAfterNarrowphase=!0),n.allowSleep&&n.type===R.DYNAMIC&&n.sleepState===R.SLEEPING&&i.sleepState===R.AWAKE&&i.type!==R.STATIC&&i.velocity.lengthSquared()+i.angularVelocity.lengthSquared()>=2*i.sleepSpeedLimit**2&&(n.wakeUpAfterNarrowphase=!0),this.collisionMatrix.set(i,n,!0),this.collisionMatrixPrevious.get(i,n)||(Xi.body=n,Xi.contact=s,i.dispatchEvent(Xi),Xi.body=i,n.dispatchEvent(Xi)),this.bodyOverlapKeeper.set(i.id,n.id),this.shapeOverlapKeeper.set(o.id,a.id)}for(this.emitContactEvents(),l&&(h.makeContactConstraints=_i.now()-u,u=_i.now()),f=0;f!==n;f++){const t=o[f];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(w=d.length,f=0;f!==w;f++){const t=d[f];t.update();for(let e=0,s=t.equations.length;e!==s;e++){const s=t.equations[e];r.addEquation(s)}}r.solve(t,this),l&&(h.solve=_i.now()-u),r.removeAllEquations();const S=Math.pow;for(f=0;f!==n;f++){const e=o[f];if(e.type&c){const s=S(1-e.linearDamping,t),i=e.velocity;i.scale(s,i);const n=e.angularVelocity;if(n){const s=S(1-e.angularDamping,t);n.scale(s,n)}}}this.dispatchEvent(Gi),l&&(u=_i.now());const z=this.stepnumber%(this.quatNormalizeSkip+1)==0,C=this.quatNormalizeFast;for(f=0;f!==n;f++)o[f].integrate(t,z,C);this.clearForces(),this.broadphase.dirty=!0,l&&(h.integrate=_i.now()-u),this.stepnumber+=1,this.dispatchEvent(Ui);let A=!0;if(this.allowSleep)for(A=!1,f=0;f!==n;f++){const t=o[f];t.sleepTick(this.time),t.sleepState!==R.SLEEPING&&(A=!0)}this.hasActiveBodies=A}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(Qi,Ji),t){for(let t=0,e=Qi.length;t<e;t+=2)tn.bodyA=this.getBodyById(Qi[t]),tn.bodyB=this.getBodyById(Qi[t+1]),this.dispatchEvent(tn);tn.bodyA=tn.bodyB=null}if(e){for(let t=0,e=Ji.length;t<e;t+=2)en.bodyA=this.getBodyById(Ji[t]),en.bodyB=this.getBodyById(Ji[t+1]),this.dispatchEvent(en);en.bodyA=en.bodyB=null}Qi.length=Ji.length=0;const s=this.hasAnyEventListener("beginShapeContact"),i=this.hasAnyEventListener("endShapeContact");if((s||i)&&this.shapeOverlapKeeper.getDiff(Qi,Ji),s){for(let t=0,e=Qi.length;t<e;t+=2){const e=this.getShapeById(Qi[t]),s=this.getShapeById(Qi[t+1]);sn.shapeA=e,sn.shapeB=s,e&&(sn.bodyA=e.body),s&&(sn.bodyB=s.body),this.dispatchEvent(sn)}sn.bodyA=sn.bodyB=sn.shapeA=sn.shapeB=null}if(i){for(let t=0,e=Ji.length;t<e;t+=2){const e=this.getShapeById(Ji[t]),s=this.getShapeById(Ji[t+1]);nn.shapeA=e,nn.shapeB=s,e&&(nn.bodyA=e.body),s&&(nn.bodyB=s.body),this.dispatchEvent(nn)}nn.bodyA=nn.bodyB=nn.shapeA=nn.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const e=t[s];e.force,e.torque,e.force.set(0,0,0),e.torque.set(0,0,0)}}}new h;const Di=new st,_i=globalThis.performance||{};if(!_i.now){let t=Date.now();_i.timing&&_i.timing.navigationStart&&(t=_i.timing.navigationStart),_i.now=()=>Date.now()-t}new o;const Ui={type:"postStep"},Gi={type:"preStep"},Xi={type:R.COLLIDE_EVENT_NAME,body:null,contact:null},Yi=[],$i=[],Ki=[],Zi=[],Qi=[],Ji=[],tn={type:"beginContact",bodyA:null,bodyB:null},en={type:"endContact",bodyA:null,bodyB:null},sn={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},nn={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null}},1635:(t,e,s)=>{function i(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}s.d(e,{A:()=>i})},8546:(t,e,s)=>{s.d(e,{A:()=>r});var i=s(2663),n=s(1635),o=s(2410);function r(t){return function(t){if(Array.isArray(t))return(0,i.A)(t)}(t)||(0,n.A)(t)||(0,o.A)(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}}}]);